// Generated by CoffeeScript 1.3.3
(function() {
  var YAML, events, fs, inspect, loadFile, zlib, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  events = require('events');

  fs = require('fs');

  inspect = require('util').inspect;

  zlib = require('zlib');

  _ = require('underscore');

  YAML = require('libyaml');

  loadFile = require('./loadfile');

  module.exports = (function(_super) {

    __extends(exports, _super);

    function exports(options) {
      this.error = __bind(this.error, this);

      this.log = __bind(this.log, this);

      this.configure = __bind(this.configure, this);

      var _this = this;
      this.streams = [];
      if (_.isString(options)) {
        loadFile(options, function(config) {
          return _this.configure(config);
        });
      } else {
        this.configure(options);
      }
    }

    exports.prototype.configure = function(config) {
      var conf, stream, _ref, _ref1, _results,
        _this = this;
      this.config = config;
      this.encode = function(obj, cb) {
        return cb(void 0, obj);
      };
      if (((_ref = this.config.defaults) != null ? _ref.encoding : void 0) === "yaml") {
        this.log("encoding is yaml");
        switch (this.config.serialize.compress) {
          case "none":
            this.encode = function(obj, cb) {
              return cb(void 0, YAML.stringify(obj));
            };
            break;
          case "deflate":
            this.encode = function(obj, cb) {
              return zlib.deflate(YAML.stringify(obj), cb);
            };
            break;
          case "deflateRaw":
            this.encode = function(obj, cb) {
              return zlib.deflateRaw(YAML.stringify(obj), cb);
            };
            break;
          case "gzip":
          case "gz":
            this.encode = function(obj, cb) {
              return zlib.gzip(YAML.stringify(obj), cb);
            };
        }
      } else if (((_ref1 = this.config.serialize) != null ? _ref1.encoding : void 0) === "json") {
        switch (this.config.serialize.compress) {
          case "none":
            this.encode = function(obj, cb) {
              return cb(void 0, JSON.stringify(obj));
            };
            break;
          case "deflate":
            this.encode = function(obj, cb) {
              return zlib.deflate(JSON.stringify(obj), cb);
            };
            break;
          case "deflateRaw":
            this.encode = function(obj, cb) {
              return zlib.deflateRaw(JSON.stringify(obj), cb);
            };
            break;
          case "gzip":
          case "gz":
            this.encode = function(obj, cb) {
              return zlib.gzip(JSON.stringify(obj), cb);
            };
        }
      }
      this.log("Configuration loaded. Installing plugins:");
      _results = [];
      for (stream in config) {
        conf = config[stream];
        if (stream[0] !== '_' && stream !== "defaults") {
          if (_.isString(conf)) {
            _results.push(loadFile(conf, function(err, conf) {
              if (err) {
                return _this.error("" + (inspect(err)));
              } else {
                return _this.install(stream, conf);
              }
            }));
          } else {
            _results.push(this.install(stream, conf));
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    exports.prototype.log = function(msg) {
      return console.log("" + msg);
    };

    exports.prototype.error = function(msg) {
      return console.error("" + msg);
    };

    exports.prototype.onAny = function(msg, cb) {};

    exports.prototype.install = function(name, config) {
      var Stream, conf, modulePath, stream,
        _this = this;
      modulePath = "lib/plugins/rest";
      if (this.config["default"] != null) {
        if (modulePath == null) {
          modulePath = this.config["default"].module;
        }
      }
      if (modulePath == null) {
        modulePath = config.module;
      }
      Stream = require(modulePath);
      conf = config;
      delete conf.module;
      stream = new Stream(conf);
      stream.emit = function(data) {
        return _this.encode(data, function(err, data) {
          if (err != null) {
            return _this.error(" - [" + name + "] error when encoding message: " + (inspect(err)));
          } else {
            _this.log(" - [" + name + "] event: " + (inspect(data)));
            return _this.emit("" + name, data);
          }
        });
      };
      stream.error = function(err) {
        return _this.error(" - [" + name + "]: " + (inspect(err)));
      };
      this.streams.push(stream);
      this.log(" - installed " + name);
      return stream.start();
    };

    exports.prototype.uninstall = function(name) {
      this.log("uninstall " + name);
      this.streams[name].stop();
      return delete this.streams[name];
    };

    return exports;

  })(events.EventEmitter);

}).call(this);
