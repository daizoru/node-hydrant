// Generated by CoffeeScript 1.3.1
(function() {
  var Hook, YAML, error, fs, inspect, loadFile, log, zlib, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Hook = require('hook.io').Hook;

  YAML = require('libyaml');

  fs = require('fs');

  _ = require('underscore');

  _ref = require("daizoru-toolbox"), log = _ref.log, error = _ref.error, loadFile = _ref.loadFile;

  inspect = require('util').inspect;

  zlib = require("zlib");

  module.exports = (function(_super) {

    __extends(exports, _super);

    exports.name = 'exports';

    function exports(options) {
      var me,
        _this = this;
      Hook.call(this, options);
      this.counter = 0;
      this.configPath = __dirname + '/../config.yml';
      this.workers = [];
      me = "anonymous";
      this.on("hydrant::error", function(err) {
        return error(err);
      });
      this.on("hook::ready", function(data) {
        log("hydrant initializing: " + (inspect(data)));
        log("loading default config");
        return loadFile(_this.configPath, function(config) {
          return _this.emit("hydrant::configure", config);
        });
      });
      this.on("hydrant::uninstall", function(name) {
        return _this.uninstall(name);
      });
      this.on("hydrant::configure", function(config) {
        var conf, stream, _ref1, _ref2, _results;
        _this.config = config;
        _this.encode = function(obj, cb) {
          return cb(void 0, obj);
        };
        if (((_ref1 = _this.config.defaults) != null ? _ref1.encoding : void 0) === "yaml") {
          log("encoding is yaml");
          switch (_this.config.serialize.compress) {
            case "none":
              _this.encode = function(obj, cb) {
                return cb(void 0, YAML.stringify(obj));
              };
              break;
            case "deflate":
              _this.encode = function(obj, cb) {
                return zlib.deflate(YAML.stringify(obj), cb);
              };
              break;
            case "deflateRaw":
              _this.encode = function(obj, cb) {
                return zlib.deflateRaw(YAML.stringify(obj), cb);
              };
              break;
            case "gzip":
            case "gz":
              _this.encode = function(obj, cb) {
                return zlib.gzip(YAML.stringify(obj), cb);
              };
          }
        } else if (((_ref2 = _this.config.serialize) != null ? _ref2.encoding : void 0) === "json") {
          switch (_this.config.serialize.compress) {
            case "none":
              _this.encode = function(obj, cb) {
                return cb(void 0, JSON.stringify(obj));
              };
              break;
            case "deflate":
              _this.encode = function(obj, cb) {
                return zlib.deflate(JSON.stringify(obj), cb);
              };
              break;
            case "deflateRaw":
              _this.encode = function(obj, cb) {
                return zlib.deflateRaw(JSON.stringify(obj), cb);
              };
              break;
            case "gzip":
            case "gz":
              _this.encode = function(obj, cb) {
                return zlib.gzip(JSON.stringify(obj), cb);
              };
          }
        }
        log("Configuration loaded. Installing plugins:");
        _results = [];
        for (stream in config) {
          conf = config[stream];
          if (stream[0] !== '_' && stream !== "defaults") {
            if (_.isString(conf)) {
              _results.push(loadFile(conf, function(conf) {
                return _this.install(stream, conf);
              }));
            } else {
              _results.push(_this.install(stream, conf));
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    }

    exports.prototype.error = function(msg) {
      return console.log("ERROR: " + msg);
    };

    exports.prototype.install = function(name, config) {
      var Worker, conf, modulePath, worker,
        _this = this;
      modulePath = "lib/plugins/rest";
      if (this.config["default"] != null) {
        if (modulePath == null) {
          modulePath = this.config["default"].module;
        }
      }
      if (modulePath == null) {
        modulePath = config.module;
      }
      Worker = require(modulePath);
      conf = config;
      delete conf.module;
      worker = new Worker(conf);
      worker.emit = function(data) {
        return _this.encode(data, function(err, data) {
          if (err != null) {
            return log(" - [" + name + "] error: " + (inspect(err)));
          } else {
            log(" - [" + name + "] event: " + (inspect(data)));
            return _this.emit("hydrant::event::" + name, data);
          }
        });
      };
      worker.error = function(err) {
        return log(" - [" + name + "] error: " + (inspect(err)));
      };
      this.workers.push(worker);
      log(" - installed " + name);
      return worker.start();
    };

    exports.prototype.uninstall = function(name) {
      log("uninstall " + name);
      this.workers[name].stop();
      return delete this.workers[name];
    };

    return exports;

  })(Hook);

}).call(this);
